Задача 1. Тест съдържа отворени и затворени въпроси. Всеки въпрос се характеризира с условие, верен отговор и брой точки при верен отговор. Да се реализират:

[5 т. ] Абстрактен клас Question, който дефинира следните операции:

void print([подходящ тип] os) const, която извежда (сериализира) информацията за въпроса в текстовия поток os в избран от вас формат

void read([подходящ тиш] is), която прочита (десериализира) информацията за въпроса от текстовия поток is, във формата, в който той се извежда от print

unsigned ask() const, която задава на потребителя въпроса на стандартния изход, прочита неговия отговор и връща получения брой точки (0 при грешен отговор, пълен брой точки при верен отговор)

[15 т.] Наследник ClosedQuestion, описващ затворен въпрос, който се характеризира с крайно множество от възможни отговори, от които е указано кой е верният; 

[15 т.] Наследник OpenQuestion, описващ отворен въпрос, който съдържа правилния отговор и очаква точно съвпадение с него;

Клас Test, описващ списък от въпроси, който поддържа следните операции:

[20т.]прочитане на списък от въпроси от входен поток (например текстов файл) 

[5т.]задаване на въпросите последователно на потребителя и извеждане на общия брой събрани точки

[10т.]записване на списъка с въпроси в изходен поток (например текстов файл)

Задача 2. 

 [5 т.] Да се реализира абстрактен клас WorkItem, описващ задача със следните операции:

bool status(long now): Връща true, ако задачата е проключена към момента now (в unix epoch time формат(*) и false в противен случай

[подходящ тип] name (): Описание - символен низ с произволна дължина

[10 т.] Да се дефинира клас SingleTask, наследник на WorkItem. Клас SingleTask да дефинира задача, имаща следните характеристики, задавани по време на конструиране на задачата:

Време на стартиране (unix epoch time)

Продължителност (в милисекунди)

[20 т.] Да се дефинира клас TaskGroup, наследник на WorkItem. Обектите от клас TaskGroup да поддържат списък с произволни задачи (прости и групови). Груповата задача се счита за приключена, когато всички нейни подзадачи за приключени. Класът да реализира следните допълнителни операции:

addTask: добавяне на нова подзадача

print: Отпечатва имената на всички подзадачи

[20 т.] Да се реализира фунция bool allDone ([подходящ тип] tasks, int now), която по хетерогенния котейнер (вектор или масив) tasks с произволни типове задачи проверява дали всяка от тях е приключена в момента now.

(*)При Unix Epoch Time формата времето се задава с числото секунди, изтекли от 1 януари 1970г. до дадения момент. Например 14:50:50 на 19 май 2021 е 1621425050 в unix epoch time, а 14:51:00 на 19 май 2021 е 1621425060 в unix epoch time (разликата е 10 секунди). 